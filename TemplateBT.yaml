AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  unicorn7 (No-Lambda version)

  Demonstrates removing all compute (Lambda)
  and using direct API Gateway -> DynamoDB
  integration to achieve the same functionality.

Resources:

  #
  # 1) DynamoDB Table
  #
  UnicornTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: unicorn
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  #
  # 2) IAM Role for API Gateway to assume when calling DynamoDB
  #
  UnicornApiIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowPutItemOnUnicornTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt UnicornTable.Arn

  #
  # 3) Serverless API with direct DynamoDB integration
  #
  UnicornApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Unicorn API"
          version: "1.0"
        paths:
          /unicorn:
            post:
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
                credentials: !GetAtt UnicornApiIntegrationRole.Arn

                # 1) Force API Gateway to send the request as application/x-amz-json-1.0
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.0'"

                # 2) Transform request body + $context values into a DynamoDB PutItem call
                requestTemplates:
                  application/json: |
                    {
                      "TableName": "unicorn",
                      "Item": {
                        "id": {
                          "S": "$context.requestId"
                        },
                        "Name": {
                          "S": "$input.path('$.Name')"
                        },
                        "Weight": {
                          "S": "$input.path('$.Weight')"
                        }
                      }
                    }

                # 3) Map the DynamoDB result to a 200 status code
                responses:
                  default:
                    statusCode: "200"

Outputs:
  UnicornApiInvokeURL:
    Description: "API Gateway endpoint URL for POST requests"
    Value: !Sub "https://${UnicornApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/unicorn"
